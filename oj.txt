面试题 16.05. 阶乘尾数
class Solution {
public:
    int trailingZeroes(int n) {
        int count=0;
        while(n>=5)
        {
            n/=5;
            count+=n;
        }
        return count;
    }
};




HJ7 取近似值
#include <iostream>
using namespace std;

int main() {
    double n;
    cin>>n;
    int nn=(int)n;
    if(n-nn>=0.5)
    ++nn;
    cout<<nn;
    return 0;
    }
    


OR140 数列
#include <iostream>
using namespace std;

// //递归次数太多，容易栈溢出，有示例过不了
// int knum(int n)
// {
//     if(n==2)
//     return 2;
//     if(n==1)
//     return 1;

//     return 2*knum(n-1)+knum(n-2);
// }

// int main() {
//     int n;
//     cin>>n;
//     getchar();
//     for(int i=0;i<n;++i)
//     {
//         int ret;
//         cin>>ret;
//         getchar();
//         cout<<(knum(ret)%32767)<<endl;
//     }
//     return 0;
// }
// 64 位输出请用 printf("%lld")

#include<vector>
int main()
{
    vector<int> v;
    v.push_back(1);
    v.push_back(2);
    int n;
    cin>>n;
    getchar();
    for(int i=0;i<n;++i)
    {
        int k;
        cin>>k;
        getchar();
        if(v.size()>=k)
        cout<<v[k-1]<<endl;
        else
        {
            for(int i=v.size();i<k;++i)
            {
                int vnum=(2*v[i-1]+v[i-2])%32767;
                v.push_back(vnum);
            }
            cout<<v[v.size()-1]<<endl;
        }
    }

    return 0;
}




HJ40 统计字符
#include <iostream>
#include<string>
using namespace std;

int main() {
    string str;
    getline(cin,str);
    int chnum1=0,chnum2=0,chnum3=0,chnum4=0;
    for(size_t i=0;i<str.size();++i)
    {
        if((str[i]>='a'&&str[i]<='z')||(str[i]>='A'&&str[i]<='Z'))
        ++chnum1;
        else if(str[i]==' ')
        {
            ++chnum2;
        }
        else if(str[i]>='0'&&str[i]<='9')
        {
            ++chnum3;
        }
        else
        ++chnum4;
    }
    cout<<chnum1<<endl<<chnum2<<endl<<chnum3<<'\n'<<chnum4<<endl;
    return 0;
}



1480. 一维数组的动态和
class Solution {
public:
    vector<int> runningSum(vector<int>& nums) {
        vector<int> v;
        for(int i=0;i<nums.size();++i)
        {
            int sum=0;
            for(int j=0;j<=i;++j)
            {
                sum+=nums[j];
            }
            v.push_back(sum);
        }
        return v;
    }
};






35. 搜索插入位置
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int n = nums.size();
        int left = 0, right = n - 1, ret = n;
        while (left <= right) {
            //int mid = ((right - left) >> 1) + left;
            int mid =(left+right)/2;
            if (target <= nums[mid]) {
                ret = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return ret;
    }
};