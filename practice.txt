//https://leetcode.cn/problems/pascals-triangle/
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** generate(int numRows, int* returnSize, int** returnColumnSizes){
    //二级指针是因为数组的元素是一级指针，而接收一级指针本身的地址要用二级指针
    int** ret=(int*)malloc(sizeof(int*)*numRows);//开辟一个数组空间，数组元素为指针
    *returnSize=numRows;//数组的元素个数
    *returnColumnSizes=(int*)malloc(sizeof(int)*numRows);//数组元素为指针，每个指针所指向的是一位数组，这是存放每个一维数组元素个数的数组
    for(int i=0;i<numRows;i++)
    {
        ret[i]=(int*)malloc(sizeof(int)*(i+1));//开辟数组元素指针 所指向的一维数组的空间
        (*returnColumnSizes)[i]=i+1;
        ret[i][0]=ret[i][i]=1;
        for(int j=1;j<i;j++)
        {
            ret[i][j]=ret[i-1][j-1]+ret[i-1][j];
        }

    }
    return ret;
}



//https://leetcode.cn/problems/pascals-triangle-ii/
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* getRow(int rowIndex, int* returnSize){
    int** ret=(int*)malloc(sizeof(int*)*(rowIndex+1));//加1是因为这里的rowIndex指的下标
    *returnSize=rowIndex+1;
    for(int i=0;i<rowIndex+1;i++)
    {
        ret[i]=(int*)malloc(sizeof(int)*(i+1));
        ret[i][0]=ret[i][i]=1;
        for(int j=1;j<i;j++)
        {
            ret[i][j]=ret[i-1][j-1]+ret[i-1][j];
        }
    }
    return ret[rowIndex];
}




//https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/
int maxProfit(int* prices, int pricesSize){
    int minprice=prices[0];//定义最低价格和最高价格
    int maxprice=0;
    for(int i=0;i<pricesSize;i++)
    {
        if(prices[i]<minprice)
        {
            minprice=prices[i];
        }

        if(prices[i]-minprice>maxprice)
        {
            maxprice=prices[i]-minprice;
        }
    }
    return maxprice;
}