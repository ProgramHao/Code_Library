#include<stdio.h>

void Swap1(int* a, int* b)
{
	int tmp = *a;
	*a = *b;
	*b = tmp;
}

//交换排序 之 快速排序
//方法一：左右指针法
void QuickSort1(int* a, int left,int right)
{
	if (left >= right)
		return;

	int begin = left, end = right;
	int keyi = begin;
	while (begin < end)
	{
		if (begin < end && a[end] >= a[keyi])
			--end;

		if (begin < end && a[begin] <= a[keyi])
			++begin;

		Swap1(&a[begin], &a[end]);
	}
	Swap1(&a[end], &a[keyi]);
	keyi = begin;//因为此时begin和end相遇，此时的keyi会作为分开的区间的边界，所以要重置

	//此时【begin，keyi-1】keyi【keyi+1，end】
	//使得左右两边的区间有序
	QuickSort1(a, left, keyi - 1);
	QuickSort1(a, keyi + 1, right);
}

void PrintArray1(int* a, int n)
{
	for (int i = 0; i < n; i++)
	{
		printf("%d ", a[i]);
	}
	printf("\n");
}


//交换排序：冒泡排序和快速排序
//冒泡排序
void BubbleSort1(int* a, int n)
{
	for (int i = 0; i < n - 1; i++)
	{
		for (int j = 0; j < n - 1 - i; j++)
		{
			if (a[j] > a[j + 1])
			{
				Swap1(&a[j], &a[j + 1]);
			}
		}
	}
}


//插入排序之直接插入排序
void InsertSort1(int* a, int n)
{
	for (int i = 0; i < n - 1; i++)
	{
		int end = i;
		int tmp = a[end + 1];
		while (end >= 0)
		{
			if (a[end] > tmp)
			{
				a[end + 1] = a[end];
				--end;
			}
			else
				break;
		}
		a[end + 1] = tmp;
	}
}

//插入排序 之 希尔排序
void ShellSort1(int* a, int n)
{
	int gap = n;
	while (gap > 1)
	{
		gap = gap / 3 + 1;

		for (int i = 0; i < n - gap; i++)
		{
			int end = i;
			int tmp = a[end + gap];
			while (end >= 0)
			{
				if (a[end] > tmp)
				{
					a[end + gap] = a[end];
					end = end - gap;
				}
				else
					break;
			}
			a[end + gap] = tmp;
		}
	}
}

//选择排序 之 直接选择 排序
void SelectSort1(int* a, int n)
{
	int begin = 0, end = n - 1;

	//定义最大值和最小值的下标
	int maxi = begin, mini = begin;

	//找出最大值和最小值的下标
	for (int i = begin; i <= end; i++)
	{
		if (a[i] > a[maxi])
			maxi = i;
		if (a[i] < a[mini])
			mini = i;
	}

	Swap1(&a[begin], &a[mini]);

	//如果最大值在数组的第一个位置，即begin和maxi重叠，需要修正
	if (begin == maxi)
	{
		maxi = mini;
	}

	Swap1(&a[end], &a[maxi]);

	++begin;
	--end;
}

//向下调整算法
void AdjustDown1(int* a, int n, int root)
{
	int parent = root;
	int child = parent * 2 + 1;//默认左孩子

	//选择左右孩子大的那一个
	if (child+1 < n && a[child + 1] > a[child])
	{
		child = child + 1;
	}

	while (child < n)
	{
		if (a[child] > a[parent])
		{
			Swap(&a[child], &a[parent]);
			parent = child;
			child = parent * 2 + 1;
		}
		else
			break;
	}
}

//向上调整算法
void AdjustUp1(int* a, int n)
{
	int child = n - 1;
	int parent = (child - 1) / 2;
	while (parent >= 0)
	{
		if (a[child] > a[parent])
		{
			Swap(&a[child], &a[parent]);
			child = parent;
			parent = (child - 1) / 2;
		}
		else
			break;
	}
}

//选择排序 之 堆排序
void HeapSort1(int* a, int n)
{
	//建堆 排升序 要建立大堆
	//for (int i = (n - 1 - 1) / 2; i >= 0; i--)
	//{
	//	//向上调整算法
	//	AdjustDown1(a, n, i);
	//}

	//建堆 排升序 要建立大堆
	for (int i = 1; i < n; i++)
	{
		//向上调整算法
		AdjustUp1(a, i);
	}

	//对建立的大堆进行排序
	int end = n - 1;
	while (end >= 0)
	{
		Swap(&a[0], &a[end]);
		for (int i = (end - 1 - 1) / 2; i >= 0; --i)
		{
			//对建立好的堆进行排序的时候，只能用向下调整算法
			AdjustDown1(a, end, i);
		}
		--end;
	}

}

int main()
{
	int a[] = { 2,3,9,1,8,5,4,2,7,0 };
	int n = sizeof(a) / sizeof(a[0]);
	PrintArray1(a, n);
	//QuickSort1(a, 0, n - 1);
	//BubbleSort1(a, n);
	//InsertSort1(a, n);
	//ShellSort1(a, n);
	//SelectSort1(a, n);
	HeapSort1(a, n);
	PrintArray1(a, n);
	return 0;
}