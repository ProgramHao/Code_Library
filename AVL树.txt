#pragma once

#include<iostream>
#include<utility>
#include<assert.h>
using namespace std;


//定义该类是作为AVL树的节点
template<class K, class V>
struct AVLTreeNode
{
	//因为这是一个三叉链，所以节点有三个指针
	AVLTreeNode<K, V>* _left;//指向左子树的指针
	AVLTreeNode<K, V>* _right;//指针右子树的指针
	AVLTreeNode<K, V>* _parent;//指向父节点的指针

	//用类类型pair的对象_kv 做一个成员变量
	//这样类类型pair的成员变量first就可以存节点的值
	pair<K, V> _kv;
	int _bf;  // balance factor(平衡因子)—控制平衡

	//构造函数
	AVLTreeNode(const pair<K, V>& kv)
		:_left(nullptr)//初始化列表
		, _right(nullptr)
		, _parent(nullptr)
		, _kv(kv)
		, _bf(0)
	{}
};



//定义该类就是AVL树
template<class K, class V>
struct AVLTree
{
	//将类型AVLTreeNode<K, V>的类型名重定义一下
	typedef AVLTreeNode<K, V> Node;

public:

	//插入
	bool Insert(const pair<K, V>& kv)
	{
		//空树的情况
		if (_root == nullptr)
		{
			//因为是空树，将插入的数据 类类型pair的对象，
			//创建一个节点作为根节点
			_root = new Node(kv);
			return true;
		}

		//不是空树的情况
		//给一个parent是为了链接整个二叉树
		Node* parent = nullptr;
		Node* cur = _root;
		while (cur)//循环找到可以插入的位置
		{
			//节点的值 小于 插入的类类型pair对象里first的值，
			if (cur->_kv.first < kv.first)
			{
				//往右子树走，找大；
				//往下走之前，先记录一下指向当前节点的指针
				parent = cur;
				cur = cur->_right;
			}
			//节点的值 大于 插入的类类型pair对象里first的值，
			else if (cur->_kv.first > kv.first)
			{
				//往左子树走，找小
				parent = cur;
				cur = cur->_left;
			}
			else
			{
				//相等就插入失败，因为AVL树是高度平衡的搜索二叉树
				//不能有相等的值
				return false;
			}
		}

		//循环结束，代码只要能走到这里，说明找到了可以插入的位置；
		//将插入数据(类类型pair的对象)，创建一个新节点cur
		cur = new Node(kv);
		//当前节点的first的值 小于 要插入的pair的first的值 
		if (parent->_kv.first < kv.first)
		{
			//该新节点插入到当前节点的右边
			parent->_right = cur;
		}
		//当前节点的first的值 大于 要插入的pair的first的值 
		else
		{
			//该新节点插入到当前节点的右边
			parent->_left = cur;
		}
		//将该节点cur里的指针_parent链接上二叉树父节点(因为是一个三叉链)
		cur->_parent = parent;



		//上面确实是根据搜索二叉树的特性插入了新节点，
		// 但是AVL树是高度平衡的搜索二叉树，还要保持平衡！
		// 所以这个时候就要看平衡因子了！
		// 插入新节点后，只会影响该节点的祖先节点，所以可以通过新节点，
		// 一个一个祖先节点的往上找，看是否每个祖先节点的平衡因子符合要求！
		// 控制平衡
		// 1、更新平衡因子
/////////设定更新平衡因子的规则：当前节点parent的右边插入新节点cur，当前节点的_bf++;////////////////////
/////////设定更新平衡因子的规则：当前节点parent的左边插入新节点cur，当前节点的_bf--;////////////////////
		//因为可能会一直往插入节点cur的祖先节点往上更新，
		//所以可能会一直循环到根节点的parent为nullptr的时候，就可以退出循环
		while (parent)
		{
			//插入节点cur是当前节点parent的右孩子，parent->_bf++
			if (cur == parent->_right)
			{
				parent->_bf++;
			}
			//插入节点cur是当前节点parent的左孩子，parent->_bf--
			else
			{
				parent->_bf--;
			}


			//插入新节点cur，并更新其父节点的_bf后，分四种情况分析：
			//第一种：更新后，parent->_bf == 0，说明parent在插入cur前平衡因子是1 or -1，
			//        说明左右子树一边高一边低，插入新节点后两边一样高，插入后填上了矮的那边，
			//        parent所在的子树高度不变，不需要继续找祖先节点往上更新
			//第二种：更新后，parent->_bf == 1 or -1，说明parent在插入cur前平衡因子是 0，
			//        说明左右子树高度相等，插入后有一边高，parent所在的子树高度变了，
			//        需要继续找祖先往上更新。
			//第三种：更新后，parent->_bf == 2 or -2，说明parent在插入cur前平衡因子是1 or -1，
			//        说明之前已经是平衡临界值了，插入新节点后变成2 or -2，打破平衡，
			//        parent所在子树需要旋转处理
			//第四种：更新后，parent->_bf > 2 or < -2，不可能存在，则说明插入新节点之前就不是AVL树，
			//        需要去检查之前二点 操作的问题。

			//第一种情况
			if (parent->_bf == 0)
			{
				break;
			}
			//第二种情况
			else if (abs(parent->_bf) == 1)//函数abs()是绝对值
			{
				//往上走，因为节点有一个指针_parent是指向该节点的父节点的指针
				parent = parent->_parent;
				cur = cur->_parent;
				//重新进入循环，更新新祖先的_bf
			}
			//第三种情况
			else if (abs(parent->_bf) == 2)//函数abs()是绝对值
			{
				// 说明parent所在子树已经不平衡了，需要旋转处理
				//新节点插入较高右子树的右侧—右右：左单旋
				if (parent->_bf == 2 && cur->_bf == 1)
				{
					//写一个左单旋 的函数，可以写在类的私有里
					RotateL(parent);
				}
				//新节点插入较高左子树的左侧—左左：右单旋
				else if ((parent->_bf == -2 && cur->_bf == -1))
				{
					//写一个右单旋 的函数，可以写在类的私有里
					RotateR(parent);
				}
				//新节点插入较高左子树的右侧—左右：先左单旋再右单旋
				else if (parent->_bf == -2 && cur->_bf == 1)
				{
					//复用左单旋和右单旋
					RotateLR(parent);
				}
				//新节点插入较高右子树的左侧—右左：先右单旋再左单旋
				else if (parent->_bf == 2 && cur->_bf == -1)
				{
					//复用右单旋和右左旋
					RotateRL(parent);
				}
				else
				{
					//其他情况直接报错并终止程序
					assert(false);
				}

				//执行任意的旋转后，就可以退出循环
				//因为此时该树已经是AVL树了
				break;
			}
			//第四种情况
			else
			{
				//这种情况就是上面的第4种，直接报错
				assert(false);
			}
		}

		return true;
	}




//这里又写了public和private只是为了方便看，其实应该是要与其他的public或private合并的
public:
	//中序遍历，因为AVL树是高度平衡的二叉树，所以中序遍历依旧是有序的
	void InOrder()
	{
		_InOrder(_root);
		cout << endl;
	}
private:
	void _InOrder(Node* root)
	{
		if (root == nullptr)
		{
			return;
		}

		_InOrder(root->_left);
		cout << root->_kv.first << ":" << root->_kv.second << endl;
		_InOrder(root->_right);
	}





//这里又写了public和private只是为了方便看，其实应该是要与其他的public或private合并的
public:
	//判断是否平衡
	bool IsBalance()
	{
		return _IsBalance(_root);
	}
private:
	bool _IsBalance(Node* root)
	{
		//递归结束的条件 以及 空树的情况
		if (root == nullptr)
		{
			return true;
		}

		//左子树的高度
		int leftHT = Height(root->_left);
		//右子树的高度
		int rightHT = Height(root->_right);
		//求出左右子树的高度差，因为我们规定平衡因子规矩的原因，
		//左右子树高度差=右子树的高度-左子树的高度 就可以与 子树的父节点的平衡因子比较，
		int diff = rightHT - leftHT;

		//比较不相等的时候
		if (diff != root->_bf)
		{
			cout << root->_kv.first << "平衡因子异常" << endl;
			//直接返回
			return false;
		}

		//继续递归往下走 abs(diff)<2是经过了上面的代码，
		//说明diff和root->_bf是相等的，并且高度差为1或-1或0
		return abs(diff) < 2
			&& _IsBalance(root->_left)
			&& _IsBalance(root->_right);
	}
	//返回AVL树的高度
	int Height(Node* root)
	{
		if (root == nullptr)
			return 0;

		return max(Height(root->_left), Height(root->_right)) + 1;
	}






private:

	//左单旋
	//为什么这里不用 引用，因为我们只需要改变parent这个指针 指向的空间的内容，
	//这里并不会改变这个指针parent本身，所以不需要用引用
	void RotateL(Node* parent)
	{
		Node* subR = parent->_right;
		Node* subRL = subR->_left;

		parent->_right = subRL;
		if (subRL)//高度h可能为0，不为0才链接上
			subRL->_parent = parent;

		//先保存parent的父节点
		Node* ppNode = parent->_parent;

		subR->_left = parent;
		parent->_parent = subR;

		//当前parent是整个树的根节点
		if (_root == parent)
		{
			_root = subR;
			subR->_parent = nullptr;
		}
		//当前parent是子树的根节点
		else
		{
			//节点parent的是其父节点的左孩子
			if (ppNode->_left == parent)
			{
				ppNode->_left = subR;
			}
			//节点parent的是其父节点的右孩子
			else
			{
				ppNode->_right = subR;
			}

			subR->_parent = ppNode;
		}

		//左旋转后，更新对应节点的_bf为0，就达到了左旋的效果了
		subR->_bf = parent->_bf = 0;
	}




	//右单旋
	//为什么这里不用 引用，因为我们只需要改变parent这个指针 指向的空间的内容，
	//这里并不会改变这个指针parent本身，所以不需要用引用
	void RotateR(Node* parent)
	{
		Node* subL = parent->_left;
		Node* subLR = subL->_right;

		parent->_left = subLR;
		if (subLR)//高度h可能为0，不为0才链接上
			subLR->_parent = parent;

		//先保存parent的父节点
		Node* ppNode = parent->_parent;

		//链接subL和parent
		subL->_right = parent;
		parent->_parent = subL;
	
		//当前parent是整个树的根节点
		if (_root == parent)
		{	
			//修改指向整个树根节点的指针
			_root = subL;
			subL->_parent = nullptr;//此时它的父节点就为空
		}
		//当前parent是子树的根节点
		else
		{
			//节点parent的是其父节点的左孩子
			if (ppNode->_left == parent)
			{
				ppNode->_left = subL;
			}
			//节点parent的是其父节点的右孩子
			else
			{
				ppNode->_right = subL;
			}
		}

		//右旋转后，更新对应节点的_bf为0，就达到了左旋的效果了
		subL->_bf = parent->_bf = 0;
	}



	//新节点插入较高左子树的右侧—左右：先左单旋再右单旋
	//为什么这里不用 引用，因为我们只需要改变parent这个指针 指向的空间的内容，
	//这里并不会改变这个指针parent本身，所以不需要用引用
	void RotateLR(Node* parent)
	{
		Node* subL = parent->_left;
		Node* subLR = subL->_right;
		//用临时变量bf记录subLR的平衡因子
		int bf = subLR->_bf;

		//三种情况，旋转的过程都一样，只是先左单旋再右单旋后，
		// 对应的_bf会不同，需要根据三种情况进行判断修改
		//先左旋parent的左孩子，复用左单旋
		RotateL(parent->_left);
		//再右旋parent，复用右单旋
		RotateR(parent);

		//三种情况：subLR->_bf = 0都一样
		subLR->_bf = 0;

		//第一种情况
		if (bf == 1)
		{
			parent->_bf = 0;
			subL->_bf = -1;
		}
		//第二种 情况
		else if (bf == -1)
		{
			parent->_bf = 1;
			subL->_bf = 0;
		}
		//第三种情况
		else if (bf == 0)
		{
			parent->_bf = 0;
			subL->_bf = 0;
		}
		else
		{
			//不是上面的三种情况，说明插入有问题，直接报错
			assert(false);
		}
	}





	//新节点插入较高右子树的左侧—右左：先右单旋再左单旋
	//为什么这里不用 引用，因为我们只需要改变parent这个指针 指向的空间的内容，
	//这里并不会改变这个指针parent本身，所以不需要用引用
	void RotateRL(Node* parent)
	{
		Node* subR = parent->_right;
		Node* subRL = subR->_left;
		//用临时变量bf记录subLR的平衡因子
		int bf = subRL->_bf;

		//三种情况，旋转的过程都一样，只是先右单旋再左单旋后，
		// 对应的_bf会不同，需要根据三种情况进行判断修改
		//先右旋parent的右孩子，复用右单旋
		RotateR(parent->_right);
		//再左旋parent，复用左单旋
		RotateL(parent);

		//三种情况：subLR->_bf = 0都一样
		subRL->_bf = 0;

		//第一种情况
		if (bf == 1)
		{
			subR->_bf = 0;
			parent->_bf = -1;
		}
		//第二种情况
		else if (bf == -1)
		{
			subR->_bf = 1;
			parent->_bf = 0;
		}
		//第三种情况
		else if (bf == 0)
		{
			parent->_bf = 0;
			subR->_bf = 0;
		}
		else
		{
			//不是上面的三种情况，说明插入有问题，直接报错
			assert(false);
		}
	}


private:
	//该类的成员变量就只有一个，指向根节点的指针_root
	Node* _root = nullptr;

};