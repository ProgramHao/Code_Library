 https://leetcode-cn.com/problems/intersection-of-two-linked-lists/description/
 struct ListNode {
      int val;
      struct ListNode *next;
  };

struct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB) {
    if(headA==NULL||headB==NULL)
    {
        return NULL;
    }
    struct ListNode *curA=headA;
    struct ListNode *curB=headB;
    while (curA != curB) 
    {
        curA = curA == NULL ? headB : curA->next;
        curB = curB == NULL ? headA : curB->next;
    }
    return curA;
}



https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/solution/er-cha-shu-de-zui-xiao-shen-du-by-leetcode-solutio/
int minDepth(struct TreeNode *root) {
    if (root == NULL) {
        return 0;
    }

    if (root->left == NULL && root->right == NULL) {
        return 1;
    }

    int min_depth = INT_MAX;
    if (root->left != NULL) {
        min_depth = fmin(minDepth(root->left), min_depth);
    }
    if (root->right != NULL) {
        min_depth = fmin(minDepth(root->right), min_depth);
    }

    return min_depth + 1;
}
