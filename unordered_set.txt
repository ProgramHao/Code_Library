<<<<<<<<<<<<<<>>>>>>>>>>>>>>>
<<<<<<<<<<<HashTable.h>>>>>>>>>>
<<<<<<<<<<<<<<>>>>>>>>>>>>>>>

#pragma once


#include<iostream>
using namespace std;
#include<vector>


//用开散列的方法是哈希思想中用的最多的。
//这里用开散列的方法解决哈希冲突，与上面区分，重新定义一个命名空间
namespace Bucket
{
	//哈希表的节点
	template<class T>
	struct HashNode
	{
		T _data;
		HashNode<T>* _next;

		HashNode(const T& data)
			:_data(data)
			, _next(nullptr)
		{}
	};



	// 前置声明
	//因为我们在 哈希结构迭代器 里会用到哈希表，而哈希表的定义在这个哈希结构迭代器之后，
	//所以如果要用，就要在前面加上声明，这样就可以直接使用了
	template<class K, class T, class Hash, class KeyOfT>
	class HashTable;



	//哈希结构的迭代器
	template<class K, class T, class Hash, class KeyOfT>
	struct __HashIterator
	{
		//类型名重定义
		typedef HashNode<T> Node;
		typedef HashTable<K, T, Hash, KeyOfT> HT; 
		typedef __HashIterator<K, T, Hash, KeyOfT> Self;


		//成员变量
		Node* _node; //一个指向节点的指针
		HT* _pht;    //一个指向哈希表的指针

		
		//构造函数
		__HashIterator(Node* node, HT* pht)
			:_node(node)
			, _pht(pht)
		{}

		T& operator*()
		{
			return _node->_data;
		}

		T* operator->()
		{
			return &_node->_data;
		}

		//返回的也是迭代器
		Self& operator++()
		{
			if (_node->_next) //能在当前桶往前走，就在当前桶
			{
				// 当前桶中迭代
				_node = _node->_next;
			}
			else //当前桶走完了，就找下一个桶
			{
				// 找下一个桶
				Hash hash;
				KeyOfT kot;
				//算出当前桶的下标i
				size_t i = hash(kot(_node->_data)) % _pht->_tables.size();
				//i要++一下，就是下一个桶的位置去找
				++i;
				for (; i < _pht->_tables.size(); ++i)
				{
					if (_pht->_tables[i]) //改下标有哈希桶
					{
						//指向节点的成员变量_node就指向该哈希桶的位置
						_node = _pht->_tables[i];
						break;
					}
				}

				// i一直走，走到哈希表的尾部，
				//说明后面没有有数据的桶了
				if (i == _pht->_tables.size())
				{
					//指向节点的成员变量_node就置空
					_node = nullptr;
				}
			}

			//返回 this指针的解引用(就是哈希结构的迭代器)
			return *this;
		}

		bool operator!=(const Self& s) const
		{
			return _node != s._node;
		}

		bool operator==(const Self& s) const
		{
			return _node == s._node;
		}
	};




	//用开散列的哈希表
	template<class K, class T, class Hash, class KeyOfT>
	class HashTable
	{
		typedef HashNode<T> Node;

		//这里用友员，告诉编译器 哈希结构迭代器是哈希表的友员，因为哈希结构迭代器里会访问哈希表的私有成员变量；
		//因为哈希结构迭代器 是一个类模板，所以必须带上类模板参数
		template<class K, class T, class Hash, class KeyOfT>
		friend struct __HashIterator;

	public:
		//类型名重定义
		typedef __HashIterator<K, T, Hash, KeyOfT> iterator;

		//用哈希结构的迭代器，来得到哈希表的迭代器begin()
		iterator begin()
		{
			for (size_t i = 0; i < _tables.size(); ++i)
			{
				if (_tables[i]) //找到哈希表不为空的下标位置
				{
					return iterator(_tables[i], this); //这是该类的构造函数，用的匿名对象
				}
			}

			return end();
		}


		//用哈希结构的迭代器，来得到哈希表的迭代器begin()
		iterator end()
		{
			return iterator(nullptr, this);//这是该类的构造函数，用的匿名对象
		}



		~HashTable()
		{
			for (size_t i = 0; i < _tables.size(); ++i)
			{
				Node* cur = _tables[i];
				while (cur)
				{
					Node* next = cur->_next;
					delete cur;
					cur = next;
				}
				_tables[i] = nullptr;
			}
		}

		inline size_t __stl_next_prime(size_t n)
		{
			static const size_t __stl_num_primes = 28;
			static const size_t __stl_prime_list[__stl_num_primes] =
			{
				53, 97, 193, 389, 769,
				1543, 3079, 6151, 12289, 24593,
				49157, 98317, 196613, 393241, 786433,
				1572869, 3145739, 6291469, 12582917, 25165843,
				50331653, 100663319, 201326611, 402653189, 805306457,
				1610612741, 3221225473, 4294967291
			};

			for (size_t i = 0; i < __stl_num_primes; ++i)
			{
				if (__stl_prime_list[i] > n)
				{
					return __stl_prime_list[i];
				}
			}

			return -1;
		}

		pair<iterator, bool> Insert(const T& data)
		{
			Hash hash;
			//第四个模板参数的作用：根据插入的数据得到键值key；
			KeyOfT kot;

			// 去重
			iterator ret = Find(kot(data));
			if (ret != end())
			{
				return make_pair(ret, false);
			}

			// 负载因子到1就扩容
			if (_size == _tables.size())
			{
				//size_t newSize = _tables.size() == 0 ? 10 : _tables.size() * 2;
				vector<Node*> newTables;
				//newTables.resize(newSize, nullptr);
				newTables.resize(__stl_next_prime(_tables.size()), nullptr);
				// 旧表中节点移动映射新表
				for (size_t i = 0; i < _tables.size(); ++i)
				{
					Node* cur = _tables[i];
					while (cur)
					{
						Node* next = cur->_next;

						//通过第四个模板参数获得相应容器的键值
						size_t hashi = hash(kot(cur->_data)) % newTables.size();
						cur->_next = newTables[hashi];
						newTables[hashi] = cur;

						cur = next;
					}

					_tables[i] = nullptr;
				}

				_tables.swap(newTables);
			}

			size_t hashi = hash(kot(data)) % _tables.size();
			// 头插
			Node* newnode = new Node(data);
			newnode->_next = _tables[hashi];
			_tables[hashi] = newnode;
			++_size;

			return make_pair(iterator(newnode, this), true);
		}

		//返回哈希表的迭代器
		iterator Find(const K& key)
		{
			if (_tables.size() == 0)
			{
				return end();
			}

			Hash hash;
			KeyOfT kot;
			size_t hashi = hash(key) % _tables.size();
			Node* cur = _tables[hashi];
			while (cur)
			{
				if (kot(cur->_data) == key)
				{
					return iterator(cur, this);
				}

				cur = cur->_next;
			}

			return end();
		}

		bool Erase(const K& key)
		{
			if (_tables.size() == 0)
			{
				return false;
			}

			Hash hash;
			KeyOfT kot;
			size_t hashi = hash(key) % _tables.size();
			Node* prev = nullptr;
			Node* cur = _tables[hashi];
			while (cur)
			{
				if (kot(cur->_data) == key)
				{
					// 1、头删
					// 2、中间删
					if (prev == nullptr)
					{
						_tables[hashi] = cur->_next;
					}
					else
					{
						prev->_next = cur->_next;
					}

					delete cur;
					--_size;

					return true;
				}

				prev = cur;
				cur = cur->_next;
			}

			return false;
		}

		size_t Size()
		{
			return _size;
		}

		// 表的长度
		size_t TablesSize()
		{
			return _tables.size();
		}

		// 桶的个数
		size_t BucketNum()
		{
			size_t num = 0;
			for (size_t i = 0; i < _tables.size(); ++i)
			{
				if (_tables[i])
				{
					++num;
				}
			}

			return num;
		}

		size_t MaxBucketLenth()
		{
			size_t maxLen = 0;
			for (size_t i = 0; i < _tables.size(); ++i)
			{
				size_t len = 0;
				Node* cur = _tables[i];
				while (cur)
				{
					++len;
					cur = cur->_next;
				}

				//if (len > 0)
					//printf("[%d]号桶长度:%d\n", i, len);

				if (len > maxLen)
				{
					maxLen = len;
				}
			}

			return maxLen;
		}

	private:
		vector<Node*> _tables;
		size_t _size = 0; // 存储有效数据个数
	};

}






<<<<<<<<<<<<<<>>>>>>>>>>>>>>>
<<<<<<<<<<<Unordered_Set.h>>>>>>>>>>
<<<<<<<<<<<<<<>>>>>>>>>>>>>>>

#pragma once


#include "HashTable1.h"

namespace jh
{

	//容器unordered_set，
	//插入的数据的类型就是K，就是将K作为哈希表的第二个模板参数
	template<class K, class Hash = HashFunc<K>>
	class unordered_set
	{
		//定义一个内部类SetKeyOfT，作为参数 给哈希表的第4个模板参数KeyOfT
		struct SetKeyOfT
		{
			//获得插入数据的键值
			const K& operator()(const K& key)
			{
				return key;
			}
		};
	public:
		//加typename是告诉编译器Bucket::HashTable<K, K, Hash, SetKeyOfT>::iterator
		//这是一个类型，不是一个静态变量
		typedef typename Bucket::HashTable<K, K, Hash, SetKeyOfT>::iterator iterator;

		//封装哈希表的迭代器begin()，得到容器unordered_set的迭代器begin()
		iterator begin()
		{
			return _ht.begin();
		}

		//封装哈希表的迭代器end()，得到容器unordered_set的迭代器end()
		iterator end()
		{
			return _ht.end();
		}

		pair<iterator, bool> insert(const K& key)
		{
			return _ht.Insert(key);
		}
	private:
		//将K作为哈希表的第二个模板参数
		Bucket::HashTable<K, K, Hash, SetKeyOfT> _ht;
	};

	void test_set()
	{
		unordered_set<int> s;
		s.insert(2);
		s.insert(3);
		s.insert(1);
		s.insert(2);
		s.insert(5);

		unordered_set<int>::iterator it = s.begin();
		//auto it = s.begin();
		while (it != s.end())
		{
			cout << *it << " ";
			++it;
		}
		cout << endl;
	}
}